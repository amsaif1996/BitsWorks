Async Callbacks:
 js functions are executed in the order they are called.
not in the sequence they are defined

<html>
    <body>


        <p id="demo"></p>

<script>
function dis(x)
{

   document.getElementById("demo").innerHTML= x;

}

function first()
{
    dis("Night");
}

function second()
{
    dis("Day");
}

first();
second();


</script>

    </body>
</html>




Callback:
<html>
    <body>

<p id="demo"></p>

<script>    
     
function dis(x)
{
    document.getElementById("demo").innerHTML= x;

}

function Calculation(y,z,callback)
{
    let sum= y + z;
    callback(sum);
}
Calculation(5,5,dis);

</script>


    </body>
</html>


Asyncronous:
setTimeout is a built in function for timeouts.

<html>
    <body>
          <p id ="demo"></p>
          

          <script>
              setTimeout(hello,4000);

              function hello()
              {
                  document.getElementById("demo").innerHTML= "Hello there!"
              }
          </script>
    </body>
</html>



<html>
    <body>

         <p id="demo"></p>

         <script>
             function dis(x)
             {
                 document.getElementById("demo").innerHTML=x;
             }

             function getFile(callback)
             {
                 let req = new XMLHttpRequest();
                 req.open('GET',"Messi.html");
                 req.onload = function()
                 {
                     if(req.status==200)
                     {callback(req.responseText);}
                     else{
                         callback("error"+req.status);
                     }
                 }
                 req.send();
             }
             getFile(dis);

         </script>


    </body>
</html>





DOM: Document Object Model
JS can change,add,remove all the HTML elements,attributes,css styles in the page

In DOM all the elements are defined as objects
property= can set and get(innerHTML)
method= action can be performed(getElementById)


DOM Element:
<htm>
    <body>
        <p id= "intro">Jokes Over</p>
        <p id="demo"></p>

         <script>
              document.getElementById("demo").innerHTML=document.getElementById("intro").innerHTML;
         </script>
    </body>
</htm>

Node:
<!DOCTYPE html>
<html>
<body>

<div id="div1">
<p id="p1">This is a paragraph.</p>
<p id="p2">This is another paragraph.</p>
</div>

<script>
var para = document.createElement("p");
var node = document.createTextNode("This is new.");
para.appendChild(node);
var element = document.getElementById("div1");
element.appendChild(para);
</script>

</body>
</html>


EventListener:
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript addEventListener()</h2>

<p>This example uses the addEventListener() method to attach a click event to a button.</p>

<button id="myBtn">Try it</button>

<p id="demo"></p>

<script>
document.getElementById("myBtn").addEventListener("click", displayDate);

function displayDate() {
  document.getElementById("demo").innerHTML = Date();
}
</script>

</body>
</html> 


BOM:
BOM stands for browser object model

<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 
"Screen height is " + screen.height;
</script>

</body>
</html>



Ajax:
AJAX = Asynchronous JavaScript And XML.
Read data from a web server - after the page has loaded
Update a web page without reloading the page
Send data to a web server - in the background


how it works:
Browser:
An event occurs
create an XMLHttpRequest object
send HttpRequest

Server: Process
HTTPRequest
create a response and send data back to the browser

Browser: 
Process the returned data using JS
Update page content

XMLHttp:
The XMLHttpRequest object can be used to exchange data with a web server behind the scenes.
This means that it is possible to update parts of a web page, without reloading the whole page.


this can be done easier way bu using Fetch API which sends HTTP request


ActiveXObject is used for the old browsers which doesnt support the XMLHTTPRequest

The readyState property holds the status of the XMLHttpRequest.

The onreadystatechange property defines a function to be executed when the readyState changes.

The status property and the statusText property holds the status of the XMLHttpRequest object.


<!DOCTYPE html>
<html>
<body>

<div id="demo">
<h2>The XMLHttpRequest Object</h2>
<button type="button" onclick="loadDoc()">Change Content</button>
</div>

<script>
function loadDoc() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("demo").innerHTML =
      this.responseText;
    }
  };
  xhttp.open("GET", "ajax_info.txt", true);
  xhttp.send();
}
</script>

</body>
</html>


JSON:
JSON stands for JavaScript Object Notation
When exchanging data between a browser and a server, the data can only be text.

JSON is text, and we can convert any JavaScript object into JSON, and send JSON to the server.

We can also convert any JSON received from the server into JavaScript objects.

This way we can work with the data as JavaScript objects, with no complicated parsing and translations.

<!DOCTYPE html>
<html>
<body>


<p id="demo"></p>
<p id="demo2"></p>
<script>
var obj = { name: "Saif", age: 24, city: "Dhaka" };
var myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;
document.getElementById("demo2").innerHTML = typeof (myJSON);
</script>

</body>
</html>

Nested objects:
var myObj = {
  "name":"John",
  "age":30,
  "cars": {
  "car1":"Toyota",
  "car2":"Lamborghini",
  "car3":"Range Rover"
  }
}

Parsing:
<script>
var txt = '{"name":"John", "age":30, "city":"New York"}'
var obj = JSON.parse(txt);
document.getElementById("demo").innerHTML = obj.name + ", " + obj.age;
</script>



